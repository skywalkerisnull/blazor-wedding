using ClosedXML.Excel;
using Wedding.Data.Entities;

namespace Wedding.Services
{
    /// <summary>
    /// Generated by Bing 16 April 2023
    /// </summary>
    public static class ImportPartiesAndGuests
    {
        public static bool FromExcelFile(this List<Party> parties, string filename)
        {
            bool Success = false;
            //try
            //{
            using (var workbook = new XLWorkbook(filename))
            {
                var worksheet = workbook.Worksheet("Parties");
                //Read the column names
                var columns = new Dictionary<int, string>();
                foreach (var cell in worksheet.Row(1).CellsUsed())
                {
                    columns.Add(cell.Address.ColumnNumber, cell.Value.ToString());
                }

                //Read the data
                foreach (var row in worksheet.RowsUsed().Skip(1))
                {
                    var party = new Party();
                    foreach (var cell in row.CellsUsed())
                    {
                        var columnName = columns[cell.Address.ColumnNumber];
                        var property = party.GetType().GetProperty(columnName);
                        if (property != null)
                        {
                            property.SetValue(party, Convert.ChangeType(cell.Value, property.PropertyType));
                        }
                    }

                    //Check if the party exists in the list
                    var existingParty = parties.FirstOrDefault(p => p.PartyId == party.PartyId);
                    if (existingParty != null)
                    {
                        //Update the existing party
                        existingParty.PartyName = party.PartyName;
                        existingParty.Address = party.Address;
                        existingParty.Comments = party.Comments;
                        existingParty.IsInvited = party.IsInvited;
                        existingParty.InvitationOpened = party.InvitationOpened;
                        existingParty.InvitationSent = party.InvitationSent;
                        existingParty.UniqueInviteId = party.UniqueInviteId;
                        existingParty.InviteSentDate = party.InviteSentDate;
                    }
                    else
                    {
                        //Add a new party
                        parties.Add(party);
                    }
                }

                Success = true;
            }
            //}
            //catch
            //{
            //    //Handle exception
            //}
            return Success;
        }

        public static bool FromExcelFile(this List<Guest> guests, string filename)
        {
            bool Success = false;
            //try
            //{
            using (var workbook = new XLWorkbook(filename))
            {
                var worksheet = workbook.Worksheet("Guests");
                //Read the column names
                var columns = new Dictionary<int, string>();
                foreach (var cell in worksheet.Row(1).CellsUsed())
                {
                    columns.Add(cell.Address.ColumnNumber, cell.Value.ToString());
                }

                //Read the data
                foreach (var row in worksheet.RowsUsed().Skip(1))
                {
                    var guest = new Guest();
                    foreach (var cell in row.CellsUsed())
                    {
                        var columnName = columns[cell.Address.ColumnNumber];
                        var property = guest.GetType().GetProperty(columnName);
                        if (property != null)
                        {
                            property.SetValue(guest, Convert.ChangeType(cell.Value, property.PropertyType));
                        }
                    }

                    //Check if the guest exists in the list
                    var existingGuest = guests.FirstOrDefault(g => g.GuestId == guest.GuestId);
                    if (existingGuest != null)
                    {
                        //Update the existing guest
                        existingGuest.FirstName = guest.FirstName;
                        existingGuest.LastName = guest.LastName;
                        existingGuest.IsAttending = guest.IsAttending;
                        existingGuest.IsAttendingRehersalDinner = guest.IsAttendingRehersalDinner;
                        existingGuest.InviteAccepted = guest.InviteAccepted;
                        existingGuest.InvitationOpened = guest.InvitationOpened;
                        existingGuest.AgeBracket = guest.AgeBracket;
                        existingGuest.CommonRequirements = guest.CommonRequirements;
                        existingGuest.Allergies = guest.Allergies;
                        existingGuest.Other = guest.Other;
                        existingGuest.PartyId = guest.PartyId;
                    }
                    else
                    {
                        //Add a new guest
                        guests.Add(guest);
                    }
                }

                Success = true;
            }
            //}
            //catch
            //{
            //    //Handle exception
            //}
            return Success;
        }

        public static bool FromExcelFile(this List<Party> parties, string filename, bool partyAndGuests)
        {
            bool Success = false;
            //try
            //{
            using (var workbook = new XLWorkbook(filename))
            {
                //Import parties from the first worksheet
                var worksheet1 = workbook.Worksheet("Parties");
                //Read the column names
                var columns1 = new Dictionary<int, string>();
                foreach (var cell in worksheet1.Row(1).CellsUsed())
                {
                    columns1.Add(cell.Address.ColumnNumber, cell.Value.ToString());
                }

                //Read the data
                foreach (var row in worksheet1.RowsUsed().Skip(1))
                {
                    var party = new Party();
                    foreach (var cell in row.CellsUsed())
                    {
                        var columnName = columns1[cell.Address.ColumnNumber];
                        var property = party.GetType().GetProperty(columnName);
                        if (property != null)
                        {
                            property.SetValue(party, Convert.ChangeType(cell.Value, property.PropertyType));
                        }
                    }

                    //Check if the party exists in the list
                    var existingParty = parties.FirstOrDefault(p => p.PartyId == party.PartyId);
                    if (existingParty != null)
                    {
                        //Update the existing party
                        existingParty.PartyName = party.PartyName;
                        existingParty.Address = party.Address;
                        existingParty.Comments = party.Comments;
                        existingParty.IsInvited = party.IsInvited;
                        existingParty.InvitationOpened = party.InvitationOpened;
                        existingParty.InvitationSent = party.InvitationSent;
                        existingParty.UniqueInviteId = party.UniqueInviteId;
                        existingParty.InviteSentDate = party.InviteSentDate;
                    }
                    else
                    {
                        //Add a new party
                        parties.Add(party);
                    }
                }

                //Import guests from the second worksheet
                var worksheet2 = workbook.Worksheet("Guests");
                //Read the column names
                var columns2 = new Dictionary<int, string>();
                foreach (var cell in worksheet2.Row(1).CellsUsed())
                {
                    columns2.Add(cell.Address.ColumnNumber, cell.Value.ToString());
                }

                //Read the data
                foreach (var row in worksheet2.RowsUsed().Skip(1))
                {
                    var guest = new Guest();
                    foreach (var cell in row.CellsUsed())
                    {
                        var columnName = columns2[cell.Address.ColumnNumber];
                        var property = guest.GetType().GetProperty(columnName);
                        if (property != null)
                        {
                            property.SetValue(guest, Convert.ChangeType(cell.Value, property.PropertyType));
                        }
                    }

                    //Check if the guest exists in the list
                    var existingGuest = parties.SelectMany(p => p.Guests).FirstOrDefault(g => g.GuestId == guest.GuestId);
                    if (existingGuest != null)
                    {
                        //Update the existing guest
                        existingGuest.FirstName = guest.FirstName;
                        existingGuest.LastName = guest.LastName;
                        existingGuest.IsAttending = guest.IsAttending;
                        existingGuest.IsAttendingRehersalDinner = guest.IsAttendingRehersalDinner;
                        existingGuest.InviteAccepted = guest.InviteAccepted;
                        existingGuest.InvitationOpened = guest.InvitationOpened;
                        existingGuest.AgeBracket = guest.AgeBracket;
                        existingGuest.CommonRequirements = guest.CommonRequirements;
                        existingGuest.Allergies = guest.Allergies;
                        existingGuest.Other = guest.Other;
                        existingGuest.PartyId = guest.PartyId;
                    }
                    else
                    {
                        //Add a new guest to the corresponding party
                        var party = parties.FirstOrDefault(p => p.PartyId == guest.PartyId);
                        if (party != null)
                        {
                            party.Guests.Add(guest);
                        }
                    }
                }

                Success = true;
            }
            //}
            //catch
            //{
            //    //Handle exception
            //}
            return Success;
        }

        public static bool FromExcelFile(this List<Party> parties, string filename, char thisOne)
        {
            bool Success = false;
            try
            {
                using (var workbook = new XLWorkbook(filename))
            {
                //Import parties and guests from the first worksheet
                var worksheet = workbook.Worksheet("Parties and Guests");
                //Read the column names
                var columns = new Dictionary<int, string>();
                foreach (var cell in worksheet.Row(1).CellsUsed())
                {
                    columns.Add(cell.Address.ColumnNumber, cell.Value.ToString());
                }

                //Read the data
                foreach (var row in worksheet.RowsUsed().Skip(1))
                {
                    var party = new Party();
                    var guest = new Guest();

                    foreach (var cell in row.CellsUsed())
                    {
                        var columnName = columns[cell.Address.ColumnNumber];
                        var partyProperty = party.GetType().GetProperty(columnName);
                        if (partyProperty != null)
                        {
                            partyProperty.SetValue(party, Guid.Parse(cell.Value.ToString()));
                        }

                        var guestProperty = guest.GetType().GetProperty(columnName);
                        if (guestProperty != null)
                        {
                            guestProperty.SetValue(guest, Guid.Parse(cell.Value.ToString()));
                        }
                    }

                    //Check if the party exists in the list
                    var existingParty = parties.FirstOrDefault(p => p.PartyId == party.PartyId);
                    if (existingParty != null)
                    {
                        //Update the existing party
                        existingParty.PartyName = party.PartyName;
                        existingParty.Address = party.Address;
                        existingParty.Comments = party.Comments;
                        existingParty.IsInvited = party.IsInvited;
                        existingParty.InvitationOpened = party.InvitationOpened;
                        existingParty.InvitationSent = party.InvitationSent;
                        existingParty.UniqueInviteId = party.UniqueInviteId;
                        existingParty.InviteSentDate = party.InviteSentDate;
                    }
                    else
                    {
                        //Add a new party
                        parties.Add(party);
                    }

                    //Check if the guest exists in the list
                    var existingGuest = parties.SelectMany(p => p.Guests).FirstOrDefault(g => g.GuestId == guest.GuestId);
                    if (existingGuest != null)
                    {
                        //Update the existing guest
                        existingGuest.FirstName = guest.FirstName;
                        existingGuest.LastName = guest.LastName;
                        existingGuest.IsAttending = guest.IsAttending;
                        existingGuest.IsAttendingRehersalDinner = guest.IsAttendingRehersalDinner;
                        existingGuest.InviteAccepted = guest.InviteAccepted;
                        existingGuest.InvitationOpened = guest.InvitationOpened;
                        existingGuest.AgeBracket = guest.AgeBracket;
                        existingGuest.CommonRequirements = guest.CommonRequirements;
                        existingGuest.Allergies = guest.Allergies;
                        existingGuest.Other = guest.Other;
                        existingGuest.PartyId = guest.PartyId;
                    }
                    else
                    {
                        //Add a new guest to the corresponding party
                        var party_ = parties.FirstOrDefault(p => p.PartyId == guest.PartyId);
                        if (party_ != null)
                        {
                            party_.Guests.Add(guest);
                        }
                    }
                }

                Success = true;
            }
            }
            catch (Exception ex) 
            { 
                Success = false; 
            }
            return Success;
        }
    }
}
