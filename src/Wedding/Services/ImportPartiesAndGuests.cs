using ClosedXML.Excel;
using System.Data;
using Wedding.Data.Entities;

namespace Wedding.Services
{
    /// <summary>
    /// Generated by Bing 16 April 2023
    /// </summary>
    public static class ImportPartiesAndGuests
    {
        public static bool FromExcelFile(this List<Guest> guests, string fileName)
        {
            try
            {
                // Open the excel file
                var workbook = new XLWorkbook(fileName);

                // Access the worksheet
                var worksheet = workbook.Worksheet("Guests");
                var headerRow = worksheet.FirstRowUsed();

                var guestIdIndex = headerRow.Cells().First(c => c.Value.ToString() == "GuestId").Address.ColumnNumber;
                var firstNameIndex = headerRow.Cells().First(c => c.Value.ToString() == "FirstName").Address.ColumnNumber;
                var lastNameIndex = headerRow.Cells().First(c => c.Value.ToString() == "LastName").Address.ColumnNumber;
                var isAttendingIndex = headerRow.Cells().First(c => c.Value.ToString() == "IsAttending").Address.ColumnNumber;
                var isAttendingRehersalDinnerIndex = headerRow.Cells().First(c => c.Value.ToString() == "IsAttendingRehersalDinner").Address.ColumnNumber;
                var inviteAcceptedIndex = headerRow.Cells().First(c => c.Value.ToString() == "InviteAccepted").Address.ColumnNumber;
                var ageBracketIndex = headerRow.Cells().First(c => c.Value.ToString() == "AgeBracket").Address.ColumnNumber;
                var commonRequirementsIndex = headerRow.Cells().First(c => c.Value.ToString() == "CommonRequirements").Address.ColumnNumber;
                var allergiesIndex = headerRow.Cells().First(c => c.Value.ToString() == "Allergies").Address.ColumnNumber;
                var otherIndex = headerRow.Cells().First(c => c.Value.ToString() == "Other").Address.ColumnNumber;
                var partyIndex = headerRow.Cells().First(c => c.Value.ToString() == "PartyId").Address.ColumnNumber;

                // Create a dictionary to store the header names and addresses
                var headers = new Dictionary<string, string>();
                foreach (var cell in worksheet.Row(1).CellsUsed())
                {
                    headers.Add(cell.GetValue<string>(), cell.Address.ToString());
                }

                // Loop through the rows
                foreach (var dataRow in worksheet.RowsUsed())
                {
                    // Skip the header row
                    if (dataRow.RowNumber() == 1)
                        continue;

                    // Create a new entity instance
                    var guest = new Guest();

                    // Assign the values from the cells to the properties using the header names
                    // Check if the GuestId cell value is null or not a valid Guid and generate a new Guid if it is
                    var guestIdCell = dataRow.Cell(guestIdIndex).Value.ToString();
                    if (string.IsNullOrEmpty(guestIdCell) || !Guid.TryParse(guestIdCell, out Guid guestId))
                    {
                        guestId = Guid.NewGuid();
                    }

                    // Assign the values from each cell to the corresponding property for guests
                    guest.GuestId = guestId;
                    guest.FirstName = dataRow.Cell(firstNameIndex).Value.ToString();
                    guest.LastName = dataRow.Cell(lastNameIndex).Value.ToString();
                    guest.IsAttending = ParseNullableBool(dataRow.Cell(isAttendingIndex).Value.ToString());
                    guest.IsAttendingRehersalDinner = ParseNullableBool(dataRow.Cell(isAttendingRehersalDinnerIndex).Value.ToString());
                    guest.InviteAccepted = ParseNullableDateTime(dataRow.Cell(inviteAcceptedIndex).Value.ToString());
                    guest.AgeBracket = (AgeBracket)Enum.Parse(typeof(AgeBracket), dataRow.Cell(ageBracketIndex).Value.ToString());
                    guest.CommonRequirements = ParseCommonRequirements(dataRow.Cell(commonRequirementsIndex).Value.ToString());
                    guest.Allergies = dataRow.Cell(allergiesIndex).Value.ToString();
                    guest.Other = dataRow.Cell(otherIndex).Value.ToString();

                    var partyIdCell = dataRow.Cell(guestIdIndex).Value.ToString();

                    if (string.IsNullOrEmpty(partyIdCell) || !Guid.TryParse(partyIdCell, out Guid partyId))
                    {
                        guests.Add(guest);
                    }
                    else
                    {
                        guest.PartyId = Guid.Parse(partyIdCell);
                        guests.Add(guest);
                    }
                }
                // Return true if no exception occurred
                return true;
            }
            catch (Exception ex)
            {
                // Handle or log the exception as needed
                Console.WriteLine(ex.Message);

                // Return false if an exception occurred
                return false;
            }
        }

        public static bool FromExcelFile(this List<Party> parties, string filePath)
        {
            // Create a dictionary to store the guests by party id
            var guestsByPartyId = new Dictionary<Guid, List<Guest>>();

            // Open the workbook using ClosedXML
            using (var workbook = new XLWorkbook(filePath))
            {
                // Get the first worksheet for both parties and guests
                var worksheet = workbook.Worksheet(1);

                // Get the header row for both parties and guests
                var headerRow = worksheet.FirstRowUsed();

                // Get the column indexes for each property for parties
                var partyIdIndex = headerRow.Cells().First(c => c.Value.ToString() == "PartyId").Address.ColumnNumber;
                var partyNameIndex = headerRow.Cells().First(c => c.Value.ToString() == "PartyName").Address.ColumnNumber;
                var addressIndex = headerRow.Cells().First(c => c.Value.ToString() == "Address").Address.ColumnNumber;
                var commentsIndex = headerRow.Cells().First(c => c.Value.ToString() == "Comments").Address.ColumnNumber;
                var isInvitedIndex = headerRow.Cells().First(c => c.Value.ToString() == "IsInvited").Address.ColumnNumber;
                var invitationOpenedIndex = headerRow.Cells().First(c => c.Value.ToString() == "InvitationOpened").Address.ColumnNumber;
                var invitationSentIndex = headerRow.Cells().First(c => c.Value.ToString() == "InvitationSent").Address.ColumnNumber;
                var uniqueInviteIdIndex = headerRow.Cells().First(c => c.Value.ToString() == "UniqueInviteId").Address.ColumnNumber;
                var inviteSentDateIndex = headerRow.Cells().First(c => c.Value.ToString() == "InviteSentDate").Address.ColumnNumber;
                var saveTheDateSentIndex = headerRow.Cells().First(c => c.Value.ToString() == "SaveTheDateSent").Address.ColumnNumber;

                // Get the first worksheet for parties
                var guestIdIndex = headerRow.Cells().First(c => c.Value.ToString() == "GuestId").Address.ColumnNumber;
                var firstNameIndex = headerRow.Cells().First(c => c.Value.ToString() == "FirstName").Address.ColumnNumber;
                var lastNameIndex = headerRow.Cells().First(c => c.Value.ToString() == "LastName").Address.ColumnNumber;
                var isAttendingIndex = headerRow.Cells().First(c => c.Value.ToString() == "IsAttending").Address.ColumnNumber;
                var isAttendingRehersalDinnerIndex = headerRow.Cells().First(c => c.Value.ToString() == "IsAttendingRehersalDinner").Address.ColumnNumber;
                var inviteAcceptedIndex = headerRow.Cells().First(c => c.Value.ToString() == "InviteAccepted").Address.ColumnNumber;
                var ageBracketIndex = headerRow.Cells().First(c => c.Value.ToString() == "AgeBracket").Address.ColumnNumber;
                var commonRequirementsIndex = headerRow.Cells().First(c => c.Value.ToString() == "CommonRequirements").Address.ColumnNumber;
                var allergiesIndex = headerRow.Cells().First(c => c.Value.ToString() == "Allergies").Address.ColumnNumber;
                var otherIndex = headerRow.Cells().First(c => c.Value.ToString() == "Other").Address.ColumnNumber;


                foreach (var dataRow in worksheet.RowsUsed().Skip(1))
                {
                    // Check if the row is empty
                    if (dataRow.IsEmpty())
                    {
                        // Break the current loop and continue with the rest of the execution
                        break;
                    }

                    // Get the party id from the row
                    var partyId = Guid.Parse(dataRow.Cell(partyIdIndex).Value.ToString());

                    // Check if the party id already exists in the list of parties
                    var party = parties.FirstOrDefault(p => p.PartyId == partyId);

                    // If not, create a new party object and add it to the list
                    if (party == null)
                    {
                        party = new Party();

                        // Assign the values from each cell to the corresponding property for parties
                        party.PartyId = partyId;
                        party.PartyName = dataRow.Cell(partyNameIndex).Value.ToString();
                        party.Address = dataRow.Cell(addressIndex).Value.ToString();
                        party.Comments = dataRow.Cell(commentsIndex).Value.ToString();
                        party.IsInvited = bool.Parse(dataRow.Cell(isInvitedIndex).Value.ToString());
                        party.InvitationOpened = bool.Parse(dataRow.Cell(invitationOpenedIndex).Value.ToString());
                        party.InvitationSent = bool.Parse(dataRow.Cell(invitationSentIndex).Value.ToString());
                        party.UniqueInviteId = dataRow.Cell(uniqueInviteIdIndex).Value.ToString();
                        party.InviteSentDate = DateTime.Parse(dataRow.Cell(inviteSentDateIndex).Value.ToString());
                        party.SaveTheDateSent = bool.Parse(dataRow.Cell(saveTheDateSentIndex).Value.ToString());

                        // Add the party to the list
                        parties.Add(party);

                        // Initialize an empty list of guests for this party id
                        guestsByPartyId[party.PartyId] = new List<Guest>();
                    }

                    // Create a new guest object
                    var guest = new Guest();

                    // Assign the values from each cell to the corresponding property for guests
                    guest.GuestId = Guid.Parse(dataRow.Cell(guestIdIndex).Value.ToString());
                    guest.FirstName = dataRow.Cell(firstNameIndex).Value.ToString();
                    guest.LastName = dataRow.Cell(lastNameIndex).Value.ToString();
                    guest.IsAttending = ParseNullableBool(dataRow.Cell(isAttendingIndex).Value.ToString());
                    guest.IsAttendingRehersalDinner = ParseNullableBool(dataRow.Cell(isAttendingRehersalDinnerIndex).Value.ToString());
                    guest.InviteAccepted = ParseNullableDateTime(dataRow.Cell(inviteAcceptedIndex).Value.ToString());
                    guest.AgeBracket = (AgeBracket)Enum.Parse(typeof(AgeBracket), dataRow.Cell(ageBracketIndex).Value.ToString());
                    guest.CommonRequirements = ParseCommonRequirements(dataRow.Cell(commonRequirementsIndex).Value.ToString());
                    guest.Allergies = dataRow.Cell(allergiesIndex).Value.ToString();
                    guest.Other = dataRow.Cell(otherIndex).Value.ToString();
                    guest.PartyId = partyId;

                    // Add the guest to the list of guests for this party id
                    guestsByPartyId[guest.PartyId.Value].Add(guest);
                }

                // Loop through each party and assign the list of guests from the dictionary
                foreach (var party in parties)
                {
                    party.Guests = guestsByPartyId[party.PartyId];
                }
            }

            // Return the list of parties
            return true;
        }

        // A helper method to parse a string into a nullable bool
        private static bool? ParseNullableBool(string boolString)
        {
            // If the string is empty, return null
            if (string.IsNullOrEmpty(boolString))
            {
                return null;
            }

            // Otherwise, parse the string as a bool and return it
            return bool.Parse(boolString);
        }

        // A helper method to parse a string into a nullable DateTime
        private static DateTime? ParseNullableDateTime(string dateTimeString)
        {
            // If the string is empty, return null
            if (string.IsNullOrEmpty(dateTimeString))
            {
                return null;
            }

            // Otherwise, parse the string as a DateTime and return it
            return DateTime.Parse(dateTimeString).ToUniversalTime();
        }

        // A helper method to parse a string of common dietary requirements into a list of CommonDietaryRequirements enums
        private static List<CommonDietaryRequirements> ParseCommonRequirements(string requirementsString)
        {
            // Create a list to store the requirements
            var requirements = new List<CommonDietaryRequirements>();

            if (string.IsNullOrEmpty(requirementsString))
            {
                return requirements;
            }

            // Split the string by comma
            var requirementStrings = requirementsString.Split(',');

            // Loop through each requirement string
            foreach (var requirementString in requirementStrings)
            {
                //input.Split(',').Select(s => Enum.TryParse(s, out Color c) ? c : default);


                // Parse the requirement string as a CommonDietaryRequirements enum and add it to the list
                var requirement = (CommonDietaryRequirements)Enum.Parse(typeof(CommonDietaryRequirements), requirementString);
                requirements.Add(requirement);
            }

            // Return the list of requirements
            return requirements;
        }
    }
}