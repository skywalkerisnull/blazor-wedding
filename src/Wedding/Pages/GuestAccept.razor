<MudItem xs="12" sm="6" md="4">
    <MudSpacer></MudSpacer>
    <td>@Guest.FirstName @Guest.LastName</td>
    <MudSpacer></MudSpacer>
    <MudSwitch @bind-Checked="@Guest.IsAttending" Color="Color.Success">
    <ChildContent>
        @if (Guest.IsAttending ?? false)
        {
                <span>@isAttending</span>
        }
        else
        {
                <span>@isNotAttending</span>
        }
    </ChildContent>
    </MudSwitch>

    <MudSelect T="CommonDietaryRequirements"
               Label="Dietary Requirements"
               MultiSelection="true" 
               SelectedValues="@options"
               SelectedValuesChanged="OnSelectedValuesChanged">

        @foreach (var item in Enum.GetValues<CommonDietaryRequirements>())
        {
            <MudSelectItem T="CommonDietaryRequirements" Value="@item"/>
        }
    </MudSelect>
    @if (options.Contains(CommonDietaryRequirements.Other))
    {
        <MudItem xs="12">
            <MudTextField Label="Other Allergies" @bind-Value="@Guest.Allergies" For="@(() => Guest.Allergies)" />
        </MudItem>
    }
    @if (options.Contains(CommonDietaryRequirements.Other))
    {
        <MudItem xs="12">
            <MudTextField Label="Other Requirements" @bind-Value="@Guest.Other" For="@(() => Guest.Other)" />
        </MudItem>
    }
</MudItem>


@code {
    [Parameter]
    public Guest Guest { get; set; }

    private const string isAttending = "Yes, Attending";
    private const string isNotAttending = "No, not Attending";

    private IEnumerable<CommonDietaryRequirements> options = new List<CommonDietaryRequirements>() { CommonDietaryRequirements.None };
    private IEnumerable<CommonDietaryRequirements> previousOptions = new List<CommonDietaryRequirements>() { CommonDietaryRequirements.None };

    private void OnSelectedValuesChanged(IEnumerable<CommonDietaryRequirements> values)
    {
        var list = values.ToList();
        previousOptions = options;
        if (!previousOptions.Contains(CommonDietaryRequirements.None) && values.Contains(CommonDietaryRequirements.None))
        {
            options = new List<CommonDietaryRequirements>() { CommonDietaryRequirements.None };
        }

        else if (list.Contains(CommonDietaryRequirements.None) && list.Count > 1)
        {
            list.Remove(CommonDietaryRequirements.None);
            options = list;
        }
        else if (list.Count == 0)
        {
            options = new List<CommonDietaryRequirements>() { CommonDietaryRequirements.None };
        }
        else
        {
            options = list; 
        }
        Guest.CommonRequirements = options.ToList();
    }
}