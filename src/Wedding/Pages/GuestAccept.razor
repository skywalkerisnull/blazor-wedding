<MudItem xs="12" sm="6" md="4">
    <td>"@Guest.FirstName @Guest.LastName"</td>
    <MudSwitch Label="Attending" @bind-Checked="@Guest.IsAttending" />
    <MudSelect T="CommonDietaryRequirements"
               Label="Dietary Requirements"
               MultiSelectionTextFunc="@(new Func<List<string>, string>(DietaryMultiSelection))"
               MultiSelection="true" 
               @bind-Value="@value"
               SelectedValues="@options"
               SelectedValuesChanged="OnSelectedValuesChanged">

        @foreach (var item in Enum.GetValues<CommonDietaryRequirements>())
        {
            <MudSelectItem T="CommonDietaryRequirements" Value="@item">@item.ToString()</MudSelectItem>
        }
    </MudSelect>
    @if (options.Contains(CommonDietaryRequirements.Other))
    {
        <MudItem xs="12">
            <MudTextField Label="Other Allergies" @bind-Value="@Guest.Allergies" For="@(() => Guest.Allergies)" />
        </MudItem>
    }
    @if (options.Contains(CommonDietaryRequirements.Other))
    {
        <MudItem xs="12">
            <MudTextField Label="Other Requirements" @bind-Value="@Guest.Other" For="@(() => Guest.Other)" />
        </MudItem>
    }
</MudItem>


@code {
    [Parameter]
    public Guest Guest { get; set; }

    private string multiSelect = "None";


    private CommonDietaryRequirements value { get; set; } = CommonDietaryRequirements.None;
    private IEnumerable<CommonDietaryRequirements> options = new List<CommonDietaryRequirements>() { CommonDietaryRequirements.None };
    private IEnumerable<CommonDietaryRequirements> previousOptions = new List<CommonDietaryRequirements>() { CommonDietaryRequirements.None };

    private string DietaryMultiSelection(List<string> selectedValues)
    {
        var text = string.Join(", ", selectedValues);
        multiSelect = text;
        return text;
    }

    private void OnSelectedValuesChanged(IEnumerable<CommonDietaryRequirements> values)
    {
        var list = values.ToList();
        previousOptions = options;
        if (!previousOptions.Contains(CommonDietaryRequirements.None) && values.Contains(CommonDietaryRequirements.None))
        {
            options = new List<CommonDietaryRequirements>() { CommonDietaryRequirements.None };
            return;
        }

        if (list.Contains(CommonDietaryRequirements.None) && list.Count > 1)
        {
            list.Remove(CommonDietaryRequirements.None);
            options = list;
        }
        else if (list.Count == 0)
        {
            options = new List<CommonDietaryRequirements>() { CommonDietaryRequirements.None };
        }
        else
        {
            options = list; 
        }

        Guest.CommonRequirements = options.ToList();
    }
}