@page "/reset-password"

@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations;
@inject UserManager<IdentityUser> _userManager
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IJSRuntime _js
@inject ISnackbar Snackbar

<h3>Reset Password</h3>

<MudForm Model="@_model" OnValidSubmit="@_ResetPassword">
    <MudCard>
        <MudCardContent>
            @if (!_isAuthenticated)
            {
                <MudTextField 
                    Label="Current Password" 
                    T="string" 
                    @bind-Value="_model.CurrentPassword" 
                    Required="true" 
                    For="@(() => _model.CurrentPassword)" 
                    InputType="InputType.Password">
                </MudTextField>
            }

            <MudTextField 
                Label="New Password" 
                T="string" 
                @bind-Value="_model.NewPassword" 
                Required="true" 
                For="@(() => _model.NewPassword)" 
                InputType="InputType.Password">
            </MudTextField>

            <MudTextField 
                Label="Confirm New Password" 
                T="string" 
                @bind-Value="_model.ConfirmNewPassword" 
                Required="true" 
                For="@(() => _model.ConfirmNewPassword)" 
                InputType="InputType.Password">
            </MudTextField>

        </MudCardContent>
        <MudCardActions>
            <MudButton 
                ButtonType="ButtonType.Submit" 
                Variant="Variant.Filled" 
                Color="Color.Primary">Reset Password</MudButton>
        </MudCardActions>
    </MudCard>
</MudForm>

@code {
    private bool _isAuthenticated;
    private IdentityUser? _user;
    private ResetPasswordModel _model = new ResetPasswordModel();

    protected override async Task OnInitializedAsync()
    {
        _user = await _userManager.GetUserAsync((await _authenticationStateProvider.GetAuthenticationStateAsync()).User);
        _isAuthenticated = _user != null;
    }

    private async Task _ResetPassword()
    {
        var user = await _userManager.GetUserAsync((await _authenticationStateProvider.GetAuthenticationStateAsync()).User);
        if (user == null)
        {
            Snackbar.Add("User not found.", Severity.Error);
            return;
        }
        if (!_isAuthenticated)
        {
            var authResult = await _userManager.CheckPasswordAsync(user, _model.CurrentPassword);
            if (!authResult)
            {
                Snackbar.Add("Current password is incorrect.", Severity.Error);
                return;
            }
        }
        if (_model.NewPassword != _model.ConfirmNewPassword)
        {
            Snackbar.Add("New password and confirm new password do not match.", Severity.Error);
            return;
        }
        var token = await _userManager.GeneratePasswordResetTokenAsync(user);
        var result = await _userManager.ResetPasswordAsync(user, token, _model.NewPassword);
        if (result.Succeeded)
        {
            Snackbar.Add("Your password has been reset.", Severity.Success);
            if (!_isAuthenticated)
            {
                await _js.InvokeVoidAsync("BlazorMethods.SignOut", IdentityConstants.ExternalScheme);
                await _js.InvokeVoidAsync("BlazorMethods.SignOut", IdentityConstants.ApplicationScheme);
                _navigationManager.NavigateTo("/login");
            }
        }
        else
        {
            foreach (var error in result.Errors)
            {
                Snackbar.Add(error.Description, Severity.Error);
            }
        }
    }

    public class ResetPasswordModel
    {
        [Required]
        public string CurrentPassword { get; set; }

        [Required]
        public string NewPassword { get; set; }

        [Required]
        public string ConfirmNewPassword { get; set; }
    }
}