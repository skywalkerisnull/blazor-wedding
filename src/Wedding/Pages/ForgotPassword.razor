@page "/forgot-password"

@using Microsoft.AspNetCore.Identity;
@using Wedding.Services
@using Wedding.Templates.Emails
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.DataProtection;
@using BlazorTemplater;
@using Microsoft.AspNetCore.Identity.UI.Services
@using Severity = MudBlazor.Severity
@using FluentValidation

@inject IServiceProvider _ServiceProvider
@inject UserManager<IdentityUser> _userManager
@inject NavigationManager _navigationManager
@inject ISnackbar Snackbar
@inject IDataProtectionProvider dataProtectionProvider

<h3>Reset Password</h3>
<MudPaper Class="pa-4">
    <MudForm @ref="forgottenPasswordResetForm"
             @bind-IsValid="@success"
             @bind-Errors="@errors"
             Model="@forgotPassword"
             Validation="@Validation"
             ReadOnly="false">
        <MudTextField T="string"
                      @bind-Value="forgotPassword.Email"
                      Label="Email"
                      Required="true"
                      For="@(() => forgotPassword.Email)"
                      Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is an invalid format"})" />
        <MudButton Disabled="@_processing" Variant="Variant.Filled" Color="Color.Primary" OnClick="@SendResetPassword">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Generating Reset</MudText>
            }
            else
            {
                <MudText>Reset Password</MudText>
            }
        </MudButton>
                  </MudForm>
</MudPaper>

@code {
    ResetForgottenPassword forgotPassword = new ResetForgottenPassword();
    bool IsResetSend = false;
    bool success = true;
    string[] errors = { };
    private IValidator? _validator;
    private FluentValidationValidator? _fluentValidationValidator;
    private bool _processing = false;
    private EditContext Validation;

    private MudForm forgottenPasswordResetForm;

    protected override void OnInitialized()
    {
        Validation = new EditContext(forgotPassword);
        Validation.AddFluentValidation(_ServiceProvider, false, _validator, _fluentValidationValidator);
    }

    public async void SendResetPassword()
    {
        _processing = true;
        var user = await _userManager.FindByEmailAsync(forgotPassword.Email);
        var tokenGen = await _userManager.GeneratePasswordResetTokenAsync(user);
        var token = WebEncoders.Base64UrlEncode(tokenGen);
        //WebEncoders.Base64UrlDecode(token);

        //var confirmationLink = Url.Action(nameof(ConfirmEmail), "Account", new { token, email = user.Email }, Request.Scheme)
        
        //var link = Url.Action("ResetPassword", "Account", new { token = token }, protocol: HttpContext.Request.Scheme);

        var resetLink = _navigationManager.ToAbsoluteUri($"/reset-forgotten-password?userid={user.Id}&token={token}");

        var emailBody = new ComponentRenderer<ResetPasswordEmailTemplate>().Set(
            x => x.PasswordResetLink, resetLink.ToString()).Render();

        var emailSender = _ServiceProvider.GetService<IEmailSender>();
        await emailSender.SendEmailAsync(user.Email, "Password Reset", emailBody);

        Snackbar.Add("Please check your emails to confirm your email address", Severity.Success);
        _processing = false;
    }

    public class ResetForgottenPassword
    {
        [Required]
        public string Email { get; set; }
    }
}