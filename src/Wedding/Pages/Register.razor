@page "/login"
@using Microsoft.AspNetCore.Identity
@using Wedding.Services
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using FluentValidation
@using Wedding.Models
@using Wedding.Templates.Emails
@using BlazorTemplater;
@using Microsoft.AspNetCore.Identity.UI.Services
@using Severity = MudBlazor.Severity

@inject IServiceProvider _ServiceProvider
@inject UserManager<IdentityUser> _userManager
@inject SignInManager<IdentityUser> _signInManager
@inject NavigationManager _navigationManager
@inject ISnackbar Snackbar
@inject IConfiguration _Configuration
@inject IJSRuntime JsRuntime

@if (_Configuration.GetValue("AllowAccountRegistration", false)){
<h2>Login or Register</h2>
}
else{
<h2>Login</h2>
}

<AuthorizeView>
    <NotAuthorized>
        <MudTabs>
            <MudTabPanel Text="Login">
                <h3>Login</h3>
                <MudGrid>
                    <MudItem xs="12" sm="7">
                        <MudPaper Class="pa-4">
                            <MudForm @ref="loginForm" @bind-IsValid="@success" @bind-Errors="@errors" ReadOnly="false">
                                <MudTextField T="string"
                                              Label="Email"
                                              Required="true"
                                              RequiredError="Email is required!"
                                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is an invalid format"})" 
                                              @bind-Value="Email" />
                                <MudTextField T="string"
                                              Label="Password"
                                              HelperText="Password"
                                              InputType="InputType.Password"
                                              Required="true"
                                              RequiredError="Password is required!"
                                              @bind-Value="password" />
                                <div class="d-flex align-center justify-space-between">
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@LoginClicked">Login</MudButton>
                                </div>
                            </MudForm>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
            @if (_Configuration.GetValue("AllowAccountRegistration", false))
            {
                <MudTabPanel Text="Register">
                    <h3>Register</h3>
                    <MudGrid>
                        <MudItem xs="12" sm="7">
                        <MudPaper Class="pa-4">
                            <MudForm @ref="registrationForm" @bind-IsValid="@success" @bind-Errors="@errors" Model="@registerModel" Validation="@Validation" ReadOnly="false">
                                <MudTextField T="string"
                                        @bind-Value="registerModel.Email" 
                                        Label="Email" 
                                        Required="true" 
                                        For="@(() => registerModel.Email)"
                                        Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is an invalid format"})"/>
                                
                                    <MudTextField 
                                        @bind-Value="registerModel.Password" 
                                        Label="Password" 
                                        Required="true"
                                        RequiredError="Password is required!"
                                        For="@(() => registerModel.Password)" 
                                        T="string" 
                                        InputType="InputType.Password"/>
                                
                                    <MudTextField 
                                        @bind-Value="registerModel.ConfirmPassword" 
                                        Label="Confirm Password" 
                                        Required="true"
                                        RequiredError="Password is required!"
                                        For="@(() => registerModel.ConfirmPassword)" 
                                        T="string" 
                                        InputType="InputType.Password"/>

                                <div class="d-flex align-center justify-space-between">
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@RegisterUser">Register</MudButton>
                                </div>
                            </MudForm>
                        </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
            }

        </MudTabs>
    </NotAuthorized>
    <Authorized>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@LogoutClicked">Logout</MudButton>
    </Authorized>
</AuthorizeView>

@code {
    private LoginModel loginModel = new LoginModel();
    private RegisterModel registerModel = new RegisterModel();
    private IValidator? _validator;
    private FluentValidationValidator? _fluentValidationValidator;

    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    private MudForm loginForm;

    private MudForm registrationForm;

    public string Email { get; set; }

    private string password;

    private EditContext Validation;

    protected override void OnInitialized()
    {
        Validation = new EditContext(registerModel);
        Validation.AddFluentValidation(_ServiceProvider, false, _validator, _fluentValidationValidator);
    }

    private async Task LoginClicked()
    {
        var usr = await _userManager.FindByEmailAsync(Email);
        if (usr == null)
        {
            Snackbar.Add("User not found or password incorrect", Severity.Error);
            return;
        }

        if (await _signInManager.CanSignInAsync(usr))
        {
            var result = await _signInManager.CheckPasswordSignInAsync(usr, password, true);
            if (result == SignInResult.Success)
            {
                Guid key = Guid.NewGuid();
                BlazorCookieLoginMiddleware.Logins[key] = new LoginInfo { Email = Email, Password = password };
                _navigationManager.NavigateTo($"/login?key={key}", true);
            }
            else
            {
                Snackbar.Add("User not found or password incorrect", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Your account is blocked", Severity.Warning);
        }
    }

    private async Task RegisterUser()
    {
        if (registrationForm.IsValid)
        {
            var user = new IdentityUser { UserName = registerModel.Email, Email = registerModel.Email };
            var result = await _userManager.CreateAsync(user, registerModel.Password);
            if (result.Succeeded)
            {
                var token = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                var confirmationLink = _navigationManager.ToAbsoluteUri($"/confirmemail?userid={user.Id}&token={token}");

                var emailBody = new ComponentRenderer<RegistrationEmailTemplate>().Set(
                    x => x.ConfirmationLink, confirmationLink.ToString()).Render();

                var emailSender = _ServiceProvider.GetService<IEmailSender>();
                await emailSender.SendEmailAsync(user.Email, "New account registration", emailBody);

                Snackbar.Add("Please check your emails to confirm your email address", Severity.Success);
            }
            else
            {
                Snackbar.Add("This email address is already registered", Severity.Warning);
            }
        }
    }

    private async Task LogoutClicked()
    {
        await JsRuntime.InvokeVoidAsync("logout");
        _navigationManager.NavigateTo("/login", true);
    }

    public class EmailConfirmationModel
    {
        public string UserName { get; set; }
        public string ConfirmationLink { get; set; }
    }

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}