@page "/reset-forgotten-password"

@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations;

@inject UserManager<IdentityUser> userManager
@inject NavigationManager _navigationManager
@inject ISnackbar Snackbar

@if (IsResetSuccess)
{
    <h3>Password Reset Success</h3>
    <div>
        Your password has been reset successfully. Please login with your new password.
    </div>
    <br />
    <a href="/login">Login</a>
}
else
{
    <h3>Password Reset Confirmation</h3>
    <MudForm Model="resetConfirmation" OnValidSubmit="@ConfirmResetPassword">
        <MudCard>
            <MudCardContent>
                <MudTextField Label="New Password"
                          T="string"
                          @bind-Value="resetConfirmation.NewPassword"
                          Required="true"
                          For="@(() => resetConfirmation.NewPassword)"
                          InputType="InputType.Password">
                </MudTextField>

                <MudTextField Label="Confirm New Password"
                          T="string"
                          @bind-Value="resetConfirmation.ConfirmNewPassword"
                          Required="true"
                          For="@(() => resetConfirmation.ConfirmNewPassword)"
                          InputType="InputType.Password">
                </MudTextField>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Color="Color.Primary">Reset Password</MudButton>
            </MudCardActions>
        </MudCard>
    </MudForm>
}

@code {
    ResetConfirmation resetConfirmation = new ResetConfirmation();
    bool IsResetSuccess = false;

    protected override void OnInitialized()
    {
        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);
        resetConfirmation.Token = _navigationManager.GetUriWithQueryParameter("token", true);
        resetConfirmation.UserId = _navigationManager.GetUriWithQueryParameter("userid", true);
    }

    public async Task ConfirmResetPassword()
    {
        var user = await userManager.FindByIdAsync(resetConfirmation.UserId);
        if (user is not null)
        {
            IdentityResult result = await userManager.ResetPasswordAsync(user, resetConfirmation.Token, resetConfirmation.NewPassword);
            if (result.Succeeded)
            {
                IsResetSuccess = true;
                Snackbar.Add("Password has been reset.", Severity.Success);
            }
        }
        else
        {
            Snackbar.Add("User not found, or token has expired", Severity.Error);
        }
    }

    public class ResetConfirmation
    {
        [Required]
        public string UserId { get; set; }

        [Required]
        public string Token { get; set; }

        [Required]
        public string NewPassword { get; set; }

        [Required]
        [Compare(nameof(NewPassword))]
        public string ConfirmNewPassword { get; set; }
    }
}