@page "/reset-forgotten-password"

@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations;

@inject UserManager<IdentityUser> userManager
@inject NavigationManager _navigationManager
@inject ISnackbar Snackbar

@using BlazorTemplater;
@using Microsoft.AspNetCore.Identity.UI.Services
@using Severity = MudBlazor.Severity
@using FluentValidation

@inject IServiceProvider _ServiceProvider

<h3>Password Reset</h3>

<MudForm @ref="forgottenPasswordResetForm"
         @bind-IsValid="@success"
         @bind-Errors="@errors"
         Model="@resetConfirmation"
         Validation="@Validation"
         ReadOnly="false">
    <MudCard>
        <MudCardContent>
            <MudTextField Label="New Password"
                          T="string"
                          @bind-Value="resetConfirmation.NewPassword"
                          Required="true"
                          For="@(() => resetConfirmation.NewPassword)"
                          InputType="InputType.Password">
            </MudTextField>

            <MudTextField Label="Confirm New Password"
                          T="string"
                          @bind-Value="resetConfirmation.ConfirmNewPassword"
                          Required="true"
                          For="@(() => resetConfirmation.ConfirmNewPassword)"
                          InputType="InputType.Password">
            </MudTextField>

        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="@ConfirmResetPassword">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Resetting</MudText>
                }
                else
                {
                    <MudText>Reset Password</MudText>
                }
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudForm>

@code {
    ResetConfirmation resetConfirmation = new ResetConfirmation();
    bool IsResetSuccess = false;
    private IdentityUser? _user;
    bool success = true;
    string[] errors = { };
    private IValidator? _validator;
    private FluentValidationValidator? _fluentValidationValidator;
    private bool _processing = false;
    private EditContext Validation;
    private MudForm forgottenPasswordResetForm;

    protected override async Task OnInitializedAsync()
    {
        Validation = new EditContext(resetConfirmation);
        Validation.AddFluentValidation(_ServiceProvider, false, _validator, _fluentValidationValidator);

        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);
        var queryTokens = System.Web.HttpUtility.ParseQueryString(uri.Query);
        resetConfirmation.Token = System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(queryTokens["token"]));
        resetConfirmation.UserId = queryTokens["userid"];
        _user = await userManager.FindByIdAsync(resetConfirmation.UserId);
        if (_user == null)
        {
            Snackbar.Add("User not found, or token has expired", Severity.Error);
        }
    }

    public async void ConfirmResetPassword()
    {
        _processing = true;
        IdentityResult result = await userManager.ResetPasswordAsync(_user, resetConfirmation.Token, resetConfirmation.NewPassword);
        if (result.Succeeded)
        {
            IsResetSuccess = true;
            Snackbar.Add("Password has been reset.", Severity.Success);
        }
        else
        {
            Snackbar.Add("User not found, or token has expired", Severity.Error);
        }
        _processing = false;
    }

    public class ResetConfirmation
    {
        [Required]
        public string UserId { get; set; }

        [Required]
        public string Token { get; set; }

        [Required]
        public string NewPassword { get; set; }

        [Required]
        [Compare(nameof(NewPassword))]
        public string ConfirmNewPassword { get; set; }
    }
}