@page "/reset-forgotten-password"

@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations;

@inject UserManager<IdentityUser> userManager
@inject NavigationManager _navigationManager

@if (IsResetSuccess)
{
    <h3>Password Reset Success</h3>
    <div>
        Your password has been reset successfully. Please login with your new password.
    </div>
    <br />
    <a href="/login">Login</a>
}
else
{
    <h3>Password Reset Confirmation</h3>
    <EditForm Model="resetConfirmation" OnValidSubmit="@ConfirmResetPassword">
        <div class="field">
            <label class="label">New Password</label>
            <div class="control">
                <MudInput id="password" type="password" @bind-Value="@resetConfirmation.Password"></MudInput>
            </div>
        </div>
        <div class="field">
            <label class="label">Confirm Password</label>
            <div class="control">
                <MudInput id="confirm-password" type="password" @bind-Value="@resetConfirmation.ConfirmPassword"></MudInput>
            </div>
        </div>
        <div class="field">
            <div class="control">
                <MudButton type="submit" Color="Color.Primary">Confirm</MudButton>
            </div>
        </div>
    </EditForm>
}

@code {
    ResetConfirmation resetConfirmation = new ResetConfirmation();
    bool IsResetSuccess = false;

    protected override void OnInitialized()
    {
        //Get the token from the query parameter
        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);
        var token = _navigationManager.GetUriWithQueryParameter("token", true);
        resetConfirmation.Token = token;

    }

    public async void ConfirmResetPassword()
    {
        //Get the user by email
        var user = await userManager.FindByEmailAsync(resetConfirmation.Email);
        if (user != null)
        {
            //Verify the token and reset the password
            IdentityResult result = await userManager.ResetPasswordAsync(user, resetConfirmation.Token, resetConfirmation.Password);
            if (result.Succeeded)
            {
                IsResetSuccess = true;
            }

        }

    }

    public class ResetConfirmation
    {
        [Required]
        public string Email { get; set; }

        [Required]
        public string Token { get; set; }

        [Required]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string ConfirmPassword { get; set; }
    }
}