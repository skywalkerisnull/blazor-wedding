@page "/parties"
@using Wedding.Services
@inject IPartyService partyService
@inject IDialogService dialogService
@inject IJSRuntime _js
@inject NavigationManager _navigation
@inject IPartyService _partyService
@inject ApplicationDbContext _context

<AuthorizeView>
    <Authorized>
        <MudGrid Justify="Justify.FlexEnd">

            <MudItem xs="6">
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadGuests" Accept=".xlsx">
                    <ButtonTemplate Context="buttonContext">
                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" for="@buttonContext">
                            @if (IsUploading)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Uploading</MudText>
                            }
                            else
                            {
                                <MudText>Upload Guests</MudText>
                            }
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </MudItem>

            <MudItem xs="6">
                <MudButton Disabled="@IsDownloading" OnClick="DownloadGuests" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.CloudDownload">
                    @if (IsDownloading)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Downloading</MudText>
                    }
                    else
                    {
                        <MudText>Download Guests</MudText>
                    }
                </MudButton>
            </MudItem>

        </MudGrid>

        <MudTable Items="@parties" Hover="true" Dense="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Parties</MudText>
                <MudSpacer/>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@AddParty">Add Party</MudButton>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Address</MudTh>
                <MudTh>Comments</MudTh>
                <MudTh>Invited</MudTh>
                <MudTh>Sent</MudTh>
                <MudTh>Actions</MudTh>
                <MudTh>Invite Id</MudTh>
            </HeaderContent>
            <RowTemplate Context="party">
                <MudTd DataLabel="Name">@party.PartyName</MudTd>
                <MudTd DataLabel="Address">@party.Address</MudTd>
                <MudTd DataLabel="Comments">@party.Comments</MudTd>
                <MudTd DataLabel="Invited">
                    <MudSwitch Checked="@party.IsInvited" Disabled="true"/>
                </MudTd>
                <MudTd DataLabel="Sent">
                    <MudSwitch Checked="@party.InvitationSent" Disabled="true"/>
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@(() => EditParty(party))">Edit</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" OnClick="@(() => DeleteParty(party))">Delete</MudButton>
                    <NavLink href="@($"/guests/{party.PartyId}")">
                        <MudButton Variant="Variant.Outlined" Color="Color.Default" Size="Size.Small">Guests</MudButton>
                    </NavLink>
                </MudTd>
                <MudTd DataLabel="Invite Id">
                    <MudLink href="@($"/qrcodes/{party.UniqueInviteId}.png")">@party.UniqueInviteId</MudLink>
                    </MudTd>
            </RowTemplate>
        </MudTable>
    </Authorized>
</AuthorizeView>

@code {
    private List<Party> parties;
    private bool Busy = false;
    private bool IsDownloading = false;
    private bool IsUploading = false;

    protected override async Task OnInitializedAsync()
    {
        Busy = true;

        try
        {
            parties = await partyService.GetAllAsync();
        }
        finally
        {
            Busy = false;
        }
        await base.OnInitializedAsync();
    }

    private async Task AddParty()
    {
        var dialog = dialogService.Show<PartyForm>("Add Party");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var party = (Party)result.Data;
            await partyService.AddAsync(party);
            parties.Add(party);
            StateHasChanged();
        }
    }

    private async Task EditParty(Party party)
    {
        var dialog = dialogService.Show<PartyForm>("Edit Party", new DialogParameters { ["Party"] = party });
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var updatedParty = (Party)result.Data;
            await partyService.UpdateAsync(updatedParty);
            var index = parties.IndexOf(party);
            parties[index] = updatedParty;
            StateHasChanged();
        }
    }

    private async Task DeleteParty(Party party)
    {
        bool? result = await dialogService.ShowMessageBox(
            "Confirm Delete",
            $"Are you sure you want to delete {party.PartyName}?",
            yesText: "Delete", cancelText: "Cancel");
        if (result == true)
        {
            await partyService.DeleteAsync(party);
            parties.Remove(party);
            StateHasChanged();
        }
    }

    private async Task UploadGuests(IBrowserFile file)
    {
        IsUploading = true;

        var tempFileName = "./temp.xlsx";

        using (var stream = File.Create(tempFileName))
        {
            await file.OpenReadStream().CopyToAsync(stream);
        }

        List<Party> parties = new();
        parties.FromExcelFile(tempFileName, 'c');
        _context.Party.UpdateRange(parties);
        IsUploading = false;
    }

    private async Task DownloadGuests()
    {
        IsDownloading = true;
        var parties = await _partyService.GetAllAsync(true);
        // TODO: This is not great, fix this up!!!
        parties.ToExcelFile("./temp.xlsx", true);
        var fileStream = File.OpenRead("./temp.xlsx");
        var fileName = "guests.xlsx";
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await _js.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        IsDownloading = false;
    }
}