@using Wedding.Services
@inject IPartyService partyService
<AuthorizeView>
    <Authorized>
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">@Title</MudText>
            </TitleContent>
            <DialogContent>
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField Required="true" Label="First Name" @bind-Value="@guest.FirstName" For="@(() => guest.FirstName)"/>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Required="true" Label="Last Name" @bind-Value="@guest.LastName" For="@(() => guest.LastName)"/>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSwitch Label="Attending" @bind-Checked="@guest.IsAttending"/>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSwitch Label="Rehearsal Dinner" @bind-Checked="@guest.IsAttendingRehersalDinner"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudDatePicker Label="Invite Accepted" @bind-Date="@guest.InviteAccepted"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudDatePicker Label="Invitation Opened" @bind-Date="@guest.InvitationOpened"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudSelect Required="true" Label="Age Bracket" @bind-Value="@guest.AgeBracket">
                            @foreach (var ageBracket in Enum.GetValues<AgeBracket>())
                            {
                                <MudSelectItem Value="@ageBracket">@ageBracket</MudSelectItem>
                            }
                        </MudSelect> </MudItem>
                    <MudItem Required="true" xs="12">
                        <MudSelect
                            T="CommonDietaryRequirements"
                            Label="Common Requirements"
                            MultiSelectionTextFunc="DietaryMultiSelection"
                            MultiSelection
                            @bind-SelectedValues="options">
                            @foreach (CommonDietaryRequirements item in Enum.GetValues<CommonDietaryRequirements>())
                            {
                                <MudSelectItem Value="@item">@item.ToString()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField Label="Allergies" @bind-Value="@guest.Allergies" For="@(() => guest.Allergies)"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField Label="Other" @bind-Value="@guest.Other" For="@(() => guest.Other)"/>
                    </MudItem>
                    @*<MudItem xs="12">
                <MudSelect Label="Party" @bind-Value="@guest.PartyId">
                    @foreach (var party in parties)
                    {
                        <MudSelectItem Value="@party.PartyId">@party.PartyName</MudSelectItem>
                    }
                </MudSelect> </MudItem>*@
                </MudGrid>
            </DialogContent>
            <DialogActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Save">Save</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="@Cancel">Cancel</MudButton>
            </DialogActions>
        </MudDialog>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public string Title { get; set; }

    [Parameter] public Guest Guest { get; set; }

    private Guest guest = new Guest()
    {
        CommonRequirements = new List<CommonDietaryRequirements>()
    };
    private List<Party> parties;

    private CommonDietaryRequirements value { get; set; } = CommonDietaryRequirements.None;
    private IEnumerable<CommonDietaryRequirements> options = new List<CommonDietaryRequirements>() { CommonDietaryRequirements.None };

    private string DietaryMultiSelection(List<string> selectedValues)
    {
        var text = string.Join(", ", selectedValues);
        Console.WriteLine(text);
        return text;
    }


    protected override async Task OnInitializedAsync()
    {
        if (Guest != null)
        {
            guest = Guest;
        }
        try
        {
            parties = await partyService.GetAllAsync();
        }
        catch
        {
            Console.WriteLine(parties.ToString());
        }
    }


    private void Save()
    {
        MudDialog.Close(DialogResult.Ok(guest));
        guest.CommonRequirements = options.ToList();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}