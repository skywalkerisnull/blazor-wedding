@using Wedding.Services
@inject IPartyService partyService
@inject ILogger<GuestForm> _logger
@inject IDialogService dialogService

<AuthorizeView>
    <Authorized>
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">@Title</MudText>
            </TitleContent>
            <DialogContent>
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField Required="true" Label="First Name" @bind-Value="@guest.FirstName" For="@(() => guest.FirstName)" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Required="true" Label="Last Name" @bind-Value="@guest.LastName" For="@(() => guest.LastName)" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSwitch Label="Attending" @bind-Checked="@guest.IsAttending" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSwitch Label="Rehearsal Dinner" @bind-Checked="@guest.IsAttendingRehersalDinner" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudDatePicker Label="Invite Accepted" @bind-Date="@guest.InviteAccepted" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudSelect Required="true" Label="Age Bracket" @bind-Value="@guest.AgeBracket">
                            @foreach (var ageBracket in Enum.GetValues<AgeBracket>())
                            {
                                <MudSelectItem Value="@ageBracket">@ageBracket</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem Required="true" xs="12">
                        <MudSelect T="CommonDietaryRequirements"
                                   Label="Dietary Requirements"
                                   MultiSelectionTextFunc="DietaryMultiSelection"
                                          MultiSelection
                                   @bind-SelectedValues="options">
                            @foreach (CommonDietaryRequirements item in Enum.GetValues<CommonDietaryRequirements>())
                            {
                                <MudSelectItem Value="@item">@item.ToString()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    @if (options.Contains(CommonDietaryRequirements.Other))
                    {
                        <MudItem xs="12">
                            <MudTextField Label="Other Allergies" @bind-Value="@guest.Allergies" For="@(() => guest.Allergies)" />
                        </MudItem>
                    }
                    @if (options.Contains(CommonDietaryRequirements.Other))
                    {
                        <MudItem xs="12">
                            <MudTextField Label="Other Requirements" @bind-Value="@guest.Other" For="@(() => guest.Other)" />
                        </MudItem>
                    }
                    <MudItem xs="12">
                        <MudSelect T="Guid?"
                                   Label="Party"
                                   Value="@guest.PartyId"
                                   ValueChanged=OnPartyChanged>
                            <MudSelectItem T="Guid?" Value="null">None</MudSelectItem>
                            <MudSelectItem T="Guid?" Value="Guid.Empty">Create new party</MudSelectItem>
                            @foreach (var party in Parties)
                            {
                                <MudSelectItem T="Guid?"
                                           Value="@party.PartyId">@party.PartyName</MudSelectItem>
                            }
                        </MudSelect>

                        @if (showPartyForm)
                        {
                            <PartyForm />
                        }

                    </MudItem>
                </MudGrid>
            </DialogContent>
            <DialogActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Save">Save</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="@Cancel">Cancel</MudButton>
            </DialogActions>
        </MudDialog>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public string Title { get; set; }

    [Parameter] public Guest Guest { get; set; }
    [Parameter] public List<Party> Parties { get; set; }

    private Guest guest = new Guest()
        {
            CommonRequirements = new List<CommonDietaryRequirements>(),
            AgeBracket = AgeBracket.EighteenPlus,
        };

    private CommonDietaryRequirements value { get; set; } = CommonDietaryRequirements.None;
    private IEnumerable<CommonDietaryRequirements> options = new List<CommonDietaryRequirements>() { CommonDietaryRequirements.None };
    bool showPartyForm = false;
    const string CreateNewParty = "create-new-party";

    async Task OnPartyChanged(Guid? value)
    {
        if (!value.HasValue)
        {
            guest.PartyId = null;
            guest.Party = null;
        }
        else if (value == Guid.Empty)
        {
            showPartyForm = true;
            guest.PartyId = await AddParty();
        }
        else
        {
            guest.PartyId = value;
        }
    }

    void OnPartyCreated(Party party)
    {
        showPartyForm = false;
        Parties.Add(party);
        guest.PartyId = party.PartyId;
    }

    private async Task<Guid?> AddParty()
    {
        var dialog = dialogService.Show<PartyForm>("Add Party");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var party = (Party)result.Data;
            await partyService.AddAsync(party);
            Parties.Add(party);
            StateHasChanged();
            return party.PartyId;
        }
        return null;
    }

    private string DietaryMultiSelection(List<string> selectedValues)
    {
        var text = string.Join(", ", selectedValues);
        return text;
    }


    protected override async Task OnInitializedAsync()
    {
        if (Guest != null)
        {
            if (Guest.IsAttending is null)
            {
                Guest.IsAttending = true;
            }
            if (Guest.IsAttendingRehersalDinner is null)
            {
                Guest.IsAttendingRehersalDinner = false;
            }
            guest = Guest;
        }
        try
        {
            if (Parties is null || Parties.Count == 0)
            {
                Parties = await partyService.GetAllAsync();
            }
        }
        catch
        {
            _logger.LogInformation(Parties.ToString());
        }
    }


    private void Save()
    {
        MudDialog.Close(DialogResult.Ok(guest));
        guest.CommonRequirements = options.ToList();

    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}