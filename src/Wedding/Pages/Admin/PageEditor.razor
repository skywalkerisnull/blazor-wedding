@page "/edit/{slug}"
@using Microsoft.EntityFrameworkCore;
@inject ApplicationDbContext dbContext
@using Radzen

<h2>Edit Page: @slug</h2>
<br />
@if (entity == null)
{
    <p>Loading…</p>
}
else
{

    <EditForm Model=@entity OnValidSubmit="@SaveChanges">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <p>
            <label for="content"></label>
            <RadzenHtmlEditor @bind-Value=@entity.Content UploadUrl="api/Image/upload" />
        </p>
        <MudButton Disabled="@_processing"
               Variant="MudBlazor.Variant.Filled"
               Color="Color.Primary"
               OnClick="@SaveChanges">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Saving</MudText>
            }
            else
            {
                <MudText>Save</MudText>
            }
        </MudButton>
    </EditForm>
}

@code {
    [Parameter]
    public string slug { get; set; }
    private bool _processing = false;
    private Data.Entities.Page entity;
    int progress;
    string info;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            entity = await dbContext.Pages.FirstOrDefaultAsync(x => x.Slug == slug);
        }
        finally
        {
            if (entity == null)
            {
                var now = DateTime.UtcNow;
                entity = new Data.Entities.Page()
                    {
                        PageId = Guid.NewGuid(),
                        Slug = slug,
                        Title = slug,
                        Content = "",
                        DateCreated = now,
                        DateModified = now,
                    };
                await dbContext.AddAsync<Data.Entities.Page>(entity);
            }
        }
        StateHasChanged();
    }
    void OnProgress(UploadProgressArgs args, string name)
    {
        this.info = $"% '{name}' / {args.Loaded} of {args.Total} bytes.";
        this.progress = args.Progress;
    }
    private async Task SaveChanges()
    {
        _processing = true;
        await dbContext.SaveChangesAsync();
        _processing = false;
        StateHasChanged();
    }
}