@page "/guests"
@using MudBlazor
@using Wedding.Services
@inject IServiceProvider _serviceProvider
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@inject IPartyService PartyService
@inject IGuestService GuestService

<h3>Guest List</h3>

<MudTable 
    Items="@guests" 
    Hover="true" 
          @ref="table"
          SortLabel="Sort By"
          Filter="new Func<Guest, bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem"
          ServerData="@(new Func<TableState, Task<TableData<Guest>>>(ServerReload))">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Guests</MudText>
        <MudSpacer />
        <MudTextField Label="Search" @bind-Value="@searchString" Immediate="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"/>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@AddGuest">Add Guest</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="name" SortBy="@((Guest p) => p.LastName)" ThenBy="@((Guest p) => p.FirstName)" InitialDirection="SortDirection.Ascending">
                Name
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="party" SortBy="@((Guest p) => p.Party)">
                Party
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="is_attending" SortBy="@((Guest p) => p.IsAttending)">
                Is Attending
            </MudTableSortLabel>
        </MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.FirstName @context.LastName</MudTd>
        <MudTd DataLabel="Party"><MudChip Text="@context.Party.PartyName"/></MudTd>
        <MudTd DataLabel="Is Attending">@context.IsAttending</MudTd>
        <MudTd DataLabel="Actions">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => EditGuest(context))"/>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteGuest(context))"/>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <TablePager />
    </PagerContent>
</MudTable>

@code {
    private List<Guest> guests = new List<Guest>();
    private string searchString = "";
    private IEnumerable<Guest> pagedData;
    private MudTable<Guest> table;
    private Guest selectedItem = null;
    private int totalItems;

    protected override async Task OnInitializedAsync()
    {
        // Load the initial data from the guest service
        guests = await GuestService.GetAllAsync(true);
    }

    private async Task<TableData<Guest>> ServerReload(TableState state)
    {
        IEnumerable<Guest> data = await GuestService.GetAllAsync(true);
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Party.PartyName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();

        totalItems = data.Count();

        switch (state.SortLabel)
        {
            case "name":
                data = data.OrderByDirection(state.SortDirection, o => o.LastName).OrderByDirection(state.SortDirection, o=>o.FirstName);
                break;
            case "party":
                data = data.OrderByDirection(state.SortDirection, o => o.Party.PartyName);
                break;
            case "is_attending":
                data = data.OrderByDirection(state.SortDirection, o => o.IsAttending);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Guest>() { TotalItems = totalItems, Items = pagedData };
    }

    private bool FilterFunc(Guest guest)
    {
        // Apply filtering to the data based on the search string
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (guest.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (guest.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (guest.Party.PartyName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task AddGuest()
    {
        // Show a dialog for adding a new guest
        var parameters = new DialogParameters();
        parameters.Add("Title", "Add Guest");
        var dialog = DialogService.Show<GuestDialog>("Add Guest", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            // Get the new guest from the dialog and add it to the guest service
            var newGuest = (Guest)result.Data;
            await GuestService.AddAsync(newGuest);
            Snackbar.Add($"Added guest {newGuest.FirstName} {newGuest.LastName}", Severity.Success);
            StateHasChanged();
        }
    }

    private async Task EditGuest(Guest guest)
    {
        // Show a dialog for editing an existing guest
        var parameters = new DialogParameters();
        parameters.Add("Title", "Edit Guest");
        parameters.Add("Guest", guest);
        var dialog = DialogService.Show<GuestDialog>("Edit Guest", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            // Get the updated guest from the dialog and update it in the guest service
            var updatedGuest = (Guest)result.Data;
            await GuestService.UpdateAsync(updatedGuest);
            Snackbar.Add($"Updated guest {updatedGuest.FirstName} {updatedGuest.LastName}", Severity.Success);
            StateHasChanged();
        }
    }

    private async Task DeleteGuest(Guest guest)
    {
        // Show a confirmation dialog for deleting a guest
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Are you sure you want to delete guest {guest.FirstName} {guest.LastName}?");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);
        var dialog = DialogService.Show<DeleteConfirmationDialog>("Delete Guest", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            // Remove the guest from the guest service
            await GuestService.DeleteAsync(guest);
            Snackbar.Add($"Deleted guest {guest.FirstName} {guest.LastName}", Severity.Success);
            StateHasChanged();
        }
    }
}