@page "/guests"
@using MudBlazor
@using Wedding.Services
@inject IServiceProvider _serviceProvider
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@inject IPartyService PartyService
@inject IGuestService GuestService

@inject IJSRuntime _js
@inject NavigationManager _navigation
@inject IPartyService _partyService
@inject ApplicationDbContext _context

<h3>Guest List</h3>

<AuthorizeView>
    <Authorized>
<MudGrid Justify="Justify.FlexEnd">

    <MudItem xs="6">
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadGuests" Accept=".xlsx">
            <ButtonTemplate Context="buttonContext">
                <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" for="@buttonContext">
                    @if (IsUploading)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Uploading</MudText>
                    }
                    else
                    {
                        <MudText>Upload Guests</MudText>
                    }
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
    </MudItem>

    <MudItem xs="6">
        <MudButton Disabled="@IsDownloading" OnClick="DownloadGuests" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.CloudDownload">
            @if (IsDownloading)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Downloading</MudText>
            }
            else
            {
                <MudText>Download Guests</MudText>
            }
        </MudButton>
    </MudItem>

</MudGrid>
<MudTable 
    Items="@guests" 
    Hover="true" 
          @ref="table"
          SortLabel="Sort By"
          Filter="new Func<Guest, bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem"
          ServerData="@(new Func<TableState, Task<TableData<Guest>>>(ServerReload))">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Guests</MudText>
        <MudSpacer />
        <MudTextField Label="Search" @bind-Value="@searchString" Immediate="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"/>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@AddGuest">Add Guest</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="name" SortBy="@((Guest p) => p.LastName)" ThenBy="@((Guest p) => p.FirstName)" InitialDirection="SortDirection.Ascending">
                Name
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="party" SortBy="@((Guest p) => p.Party)">
                Party
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="is_attending" SortBy="@((Guest p) => p.IsAttending)">
                Is Attending
            </MudTableSortLabel>
        </MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate Context="guest">
        <MudTd DataLabel="Name">@guest.FirstName @guest.LastName</MudTd>
        <MudTd DataLabel="Party"><MudChip Text="@guest.Party.PartyName" /></MudTd>
        <MudTd DataLabel="Is Attending">@guest.IsAttending</MudTd>
        <MudTd DataLabel="Actions">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@(() => EditGuest(guest))">Edit</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" OnClick="@(() => DeleteGuest(guest))">Delete</MudButton>
            </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No Party or Guest records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
    </Authorized>
</AuthorizeView>

@code {
    private List<Guest> guests = new List<Guest>();
    private bool IsDownloading = false;
    private bool IsUploading = false;
    private string searchString = "";
    private IEnumerable<Guest> pagedData;
    private MudTable<Guest> table;
    private Guest selectedItem = null;
    private int totalItems;

    protected override async Task OnInitializedAsync()
    {
        // Load the initial data from the guest service
        guests = await GuestService.GetAllAsync(true);
    }

    private async Task<TableData<Guest>> ServerReload(TableState state)
    {
        IEnumerable<Guest> data = await GuestService.GetAllAsync(true);
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Party.PartyName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();

        totalItems = data.Count();

        switch (state.SortLabel)
        {
            case "name":
                data = data.OrderByDirection(state.SortDirection, o => o.LastName).OrderByDirection(state.SortDirection, o=>o.FirstName);
                break;
            case "party":
                data = data.OrderByDirection(state.SortDirection, o => o.Party.PartyName);
                break;
            case "is_attending":
                data = data.OrderByDirection(state.SortDirection, o => o.IsAttending);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Guest>() { TotalItems = totalItems, Items = pagedData };
    }

    private bool FilterFunc(Guest guest)
    {
        // Apply filtering to the data based on the search string
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (guest.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (guest.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (guest.Party.PartyName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task AddGuest()
    {
        // Show a dialog for adding a new guest
        var parameters = new DialogParameters();
        parameters.Add("Title", "Add Guest");
        var dialog = DialogService.Show<GuestDialog>("Add Guest", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            // Get the new guest from the dialog and add it to the guest service
            var newGuest = (Guest)result.Data;
            await GuestService.AddAsync(newGuest);
            Snackbar.Add($"Added guest {newGuest.FirstName} {newGuest.LastName}", Severity.Success);
            StateHasChanged();
        }
    }

    private async Task EditGuest(Guest guest)
    {
        // Show a dialog for editing an existing guest
        var parameters = new DialogParameters();
        parameters.Add("Title", "Edit Guest");
        parameters.Add("Guest", guest);
        var dialog = DialogService.Show<GuestForm>("Edit Guest", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            // Get the updated guest from the dialog and update it in the guest service
            var updatedGuest = (Guest)result.Data;
            await GuestService.UpdateAsync(updatedGuest);
            Snackbar.Add($"Updated guest {updatedGuest.FirstName} {updatedGuest.LastName}", Severity.Success);
            StateHasChanged();
        }
    }

    private async Task DeleteGuest(Guest guest)
    {
        // Show a confirmation dialog for deleting a guest
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Are you sure you want to delete guest {guest.FirstName} {guest.LastName}?");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);
        var dialog = DialogService.Show<DeleteConfirmationDialog>("Delete Guest", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            // Remove the guest from the guest service
            await GuestService.DeleteAsync(guest);
            Snackbar.Add($"Deleted guest {guest.FirstName} {guest.LastName}", Severity.Success);
            StateHasChanged();
        }
    }

    private async Task UploadGuests(IBrowserFile file)
    {
        IsUploading = true;

        var tempFileName = "./temp.xlsx";

        using (var stream = File.Create(tempFileName))
        {
            await file.OpenReadStream().CopyToAsync(stream);
        }

        List<Party> parties = new();
        parties.FromExcelFile(tempFileName);
        _context.Party.UpdateRange(parties);
        IsUploading = false;
    }

    private async Task DownloadGuests()
    {
        IsDownloading = true;
        var guests = await GuestService.GetAllAsync(true);

        var now = DateTime.UtcNow.ToString("yyyyMMddTHHmmss");

        guests.ToExcelFile($"./guests-{now}.xlsx");
        var fileStream = File.OpenRead($"./guests-{now}.xlsx");
        var fileName = $"guests-{now}.xlsx";
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await _js.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        IsDownloading = false;
    }
}