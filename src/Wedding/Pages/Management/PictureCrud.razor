@page "/pictures"
@using Microsoft.AspNetCore.Components;
@using Wedding.Models
@using Wedding.Services
@inject IPictureService PictureService
@inject IDialogService dialogService
@inject NavigationManager NavigationManager
@inject HttpClient Http

<MudGrid>
    <MudItem xs="12">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenUploadDialog">Upload Image</MudButton>
    </MudItem>
    <MudItem xs="12">
        <MudTable Items="@Pictures" Hover="true" RowClick="OpenEditDialog">
            <HeaderContent>
                <MudTh>Thumbnail</MudTh>
                <MudTh>Original File Name</MudTh>
                <MudTh>File Name</MudTh>
                <MudTh>Dimensions</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate Context="imageGridContext">
                <MudTd DataLabel="Thumbnail"><img src="@imageGridContext.ThumbnailUrl" alt="@imageGridContext.AlternativeText" /></MudTd>
                <MudTd DataLabel="Original File Name">@imageGridContext.OriginalFileName</MudTd>
                <MudTd DataLabel="File Name">@imageGridContext.FileName</MudTd>
                <MudTd DataLabel="Dimensions">@FormatDimensions(imageGridContext.PixelsX, imageGridContext.PixelsY)</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteImage(imageGridContext))" />
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudGrid>


<MudDialog @bind-IsVisible="@UploadDialogIsOpen">
@*    <DialogContent>
        <h3>Upload Image</h3>
        <p>Select an image file to upload to the server.</p>
        <input type="file" @onchange="(e) => OnFileSelected(e)" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UploadImage">Upload</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="CloseUploadDialog">Cancel</MudButton>
    </DialogActions>*@
    <MudFileUpload T="IBrowserFile" FilesChanged="OnFileSelected">
        <ButtonTemplate>
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudUpload"
                       for="@context">
                Upload Files
            </MudButton>
        </ButtonTemplate>
    </MudFileUpload>
</MudDialog>

<MudDialog @bind-IsVisible="@EditDialogIsOpen">
    <DialogContent>
        <h3>Edit Image</h3>
        <p>Click on the image to view it in full resolution.</p>
        <MudLink Href="@SelectedPicture.FileUrl.ToString()" Target="_blank">
            <img src="@SelectedPicture.ThumbnailUrl" alt="@SelectedPicture.AlternativeText" />
        </MudLink>
        <MudTextField Label="Alternative Text" @bind-Value="@SelectedPicture.AlternativeText" />
        <MudTextField Label="File Description" @bind-Value="@SelectedPicture.FileDescription" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveImage">Save</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="CloseEditDialog">Cancel</MudButton>
    </DialogActions>
</MudDialog>


@code {
    private List<Picture>
    Pictures
    { get; set; } = new List<Picture>
        ();
    private Picture SelectedPicture { get; set; }
    private bool UploadDialogIsOpen { get; set; }
    private bool EditDialogIsOpen { get; set; }
    private IBrowserFile SelectedFile { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Get all the pictures from the service
        Pictures = await PictureService.GetAllPicturesAsync();
    }

    private void OpenUploadDialog()
    {
        // Open the upload dialog
        UploadDialogIsOpen = true;
    }

    private void CloseUploadDialog()
    {
        // Close the upload dialog
        UploadDialogIsOpen = false;
    }

    private async Task OnFileSelected(IBrowserFile file)
    {
        // Get the selected file from the input
        SelectedFile = file;
    }

    private async Task UploadImage()
    {
        // Check if a file is selected
        if (SelectedFile == null) return;


        var file = SelectedFile;
        var stream = file.OpenReadStream();
        var content = new MultipartFormDataContent();
        content.Add(new StreamContent(stream), "file", file.Name);
        var response = await Http.PostAsync("upload", content);
        Guid pictureId = Guid.Empty;
        if (response.IsSuccessStatusCode)
        {
            // Read the response content as a JSON object
            var json = await response.Content.ReadFromJsonAsync<UploadResult>();
            pictureId = Guid.Parse(json.Id);
        }
        else
        {
            Console.WriteLine($"Upload failed: {response.ReasonPhrase}");
        }

        var picture = await PictureService.GetPictureAsync(pictureId);

        Pictures.Add(picture);

        CloseUploadDialog();
    }

    private void OpenEditDialog(Picture picture)
    {
        // Set the selected picture
        SelectedPicture = picture;

        // Open the edit dialog
        EditDialogIsOpen = true;
    }

    private void CloseEditDialog()
    {
        // Close the edit dialog
        EditDialogIsOpen = false;
    }

    private async Task SaveImage()
    {
        // Save the changes to the service
        await PictureService.UpdatePictureAsync(SelectedPicture);

        // Close the edit dialog
        CloseEditDialog();
    }

    private async Task DeleteImage(Picture picture)
    {
        // Confirm the deletion
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Are you sure you want to delete {picture.FileName}?");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var dialog = dialogService.Show<DeleteImageDialog>
            ("Delete Image", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            // Delete the image from the service
            await PictureService.DeletePictureAsync(picture.PictureId);

            // Remove the picture from the list
            Pictures.Remove(picture);
        }
    }

    private string FormatFileSize(uint fileSize)
    {
        // Format the file size in bytes to a human-readable string
        string[] suffixes = { "B", "KB", "MB", "GB", "TB" };
        int order = 0;
        double length = fileSize;
        while (length >= 1024 && order < suffixes.Length - 1)
        {
            order++;
            length /= 1024;
        }
        return $"{length:0.##} {suffixes[order]}";
    }

    private string FormatDimensions(uint? pixelsX, uint? pixelsY)
    {
        // Format the image dimensions in pixels to a human-readable string
        if (pixelsX.HasValue && pixelsY.HasValue)
        {
            return $"{pixelsX} x {pixelsY} px";
        }
        else
        {
            return "Unknown";
        }
    }

    public class UploadResult
    {
        public string Url { get; set; }
        public string Id { get; set; }
    }
}
